
/* eslint-disable no-console */
import { adminDb as db } from '@/lib/firebase-admin';

// ========================================================================================
// SCRIPT D·ªåN D·∫∏P C√ÅC TR∆Ø·ªúNG C≈® TRONG INDICATOR
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Qu√©t t·∫•t c·∫£ c√°c t√†i li·ªáu trong collection 'criteria'.
// - ƒê·ªëi v·ªõi m·ªói ch·ªâ ti√™u, x√≥a c√°c tr∆∞·ªùng c≈©: 'standardLevel', 'inputType',
//   'evidenceRequirement', v√† 'subIndicators'.
// - Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y M·ªòT L·∫¶N DUY NH·∫§T ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh
//   chuy·ªÉn ƒë·ªïi sang c·∫•u tr√∫c 'contents'.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run cleanup:indicator-fields`
// ========================================================================================

async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† d·ªçn d·∫πp c√°c tr∆∞·ªùng indicator c≈©...");

        const criteriaRef = db.collection('criteria');
        const snapshot = await criteriaRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ n√†o trong collection 'criteria'.");
            return;
        }
        
        let updatedCount = 0;
        const batch = db.batch();
        const fieldsToDelete = ['standardLevel', 'inputType', 'evidenceRequirement', 'subIndicators'];

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} ti√™u ch√≠. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const criterion = doc.data();
            let needsUpdate = false;

            if (criterion.indicators && Array.isArray(criterion.indicators)) {
                criterion.indicators.forEach((indicator: any) => {
                    fieldsToDelete.forEach(field => {
                        if (indicator.hasOwnProperty(field)) {
                            delete indicator[field];
                            needsUpdate = true;
                        }
                    });
                });
            }

            if (needsUpdate) {
                console.log(`- Chu·∫©n b·ªã d·ªçn d·∫πp c√°c tr∆∞·ªùng c≈© trong ti√™u ch√≠ ID: ${doc.id}`);
                batch.update(doc.ref, { indicators: criterion.indicators });
                updatedCount++;
            }
        }

        if (updatedCount > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán d·ªçn d·∫πp cho ${updatedCount} t√†i li·ªáu ti√™u ch√≠...`);
            await batch.commit();
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ ti√™u ch√≠ n√†o c·∫ßn d·ªçn d·∫πp tr∆∞·ªùng c≈© trong c√°c ch·ªâ ti√™u.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} t√†i li·ªáu ti√™u ch√≠.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ªçn d·∫πp:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
