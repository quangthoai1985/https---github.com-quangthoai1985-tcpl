
/* eslint-disable no-console */
import { adminDb as db, adminAuth as auth } from '@/lib/firebase-admin';

// ========================================================================================
// SCRIPT X√ìA D·ªÆ LI·ªÜU C·∫§P X√É
// ========================================================================================
// M·ª§C ƒê√çCH:
// - X√≥a t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ vai tr√≤ 'commune_staff' kh·ªèi Firebase Authentication v√† Firestore.
// - X√≥a t·∫•t c·∫£ c√°c ƒë∆°n v·ªã c√≥ lo·∫°i 'commune' kh·ªèi Firestore.
// - Gi·ªØ l·∫°i ng∆∞·ªùi d√πng 'admin' v√† c√°c ƒë∆°n v·ªã c·∫•p cao h∆°n (t·ªânh, huy·ªán).
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run cleanup`
// ========================================================================================

/**
 * X√≥a t·∫•t c·∫£ c√°c document trong m·ªôt collection con theo m·ªôt query.
 * @param query - Query ƒë·ªÉ l·∫•y c√°c document c·∫ßn x√≥a.
 * @param batchSize - S·ªë l∆∞·ª£ng document x√≥a trong m·ªôt l·∫ßn.
 */
async function deleteQueryBatch(query: FirebaseFirestore.Query, batchSize: number) {
    const snapshot = await query.limit(batchSize).get();

    if (snapshot.size === 0) {
        return 0;
    }

    const batch = db.batch();
    snapshot.docs.forEach((doc) => {
        batch.delete(doc.ref);
    });
    await batch.commit();

    return snapshot.size;
}

async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp d·ªØ li·ªáu c·∫•p x√£...");

        // --- B∆Ø·ªöC 1: T√åM V√Ä X√ìA NG∆Ø·ªúI D√ôNG 'commune_staff' ---
        console.log("\n[1/3] ƒêang t√¨m ng∆∞·ªùi d√πng c·∫•p x√£ trong Firestore...");
        const usersRef = db.collection('users');
        const communeUsersQuery = usersRef.where('role', '==', 'commune_staff');
        const usersSnapshot = await communeUsersQuery.get();

        const communeUsers = usersSnapshot.docs.map(doc => doc.data());
        const uidsToDelete = communeUsers.map(user => user.id);

        if (uidsToDelete.length === 0) {
            console.log("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c·∫•p x√£ n√†o ƒë·ªÉ x√≥a.");
        } else {
            console.log(`T√¨m th·∫•y ${uidsToDelete.length} ng∆∞·ªùi d√πng c·∫•p x√£. B·∫Øt ƒë·∫ßu x√≥a...`);
            
            // X√≥a ng∆∞·ªùi d√πng kh·ªèi Firebase Authentication
            try {
                const deleteResult = await auth.deleteUsers(uidsToDelete);
                console.log(`- ƒê√£ x√≥a th√†nh c√¥ng ${deleteResult.successCount} ng∆∞·ªùi d√πng kh·ªèi Authentication.`);
                if (deleteResult.failureCount > 0) {
                    console.warn(`- X√≥a th·∫•t b·∫°i ${deleteResult.failureCount} ng∆∞·ªùi d√πng kh·ªèi Authentication.`);
                }
            } catch (error) {
                console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng kh·ªèi Authentication:", error);
            }

            // X√≥a ng∆∞·ªùi d√πng kh·ªèi Firestore
            let deletedCount = 0;
            const query = usersRef.where('role', '==', 'commune_staff');
            while (true) {
                const numDeleted = await deleteQueryBatch(query, 100);
                deletedCount += numDeleted;
                if (numDeleted === 0) break;
            }
            console.log(`- ƒê√£ x√≥a ${deletedCount} ng∆∞·ªùi d√πng kh·ªèi collection 'users' trong Firestore.`);
        }

        // --- B∆Ø·ªöC 2: X√ìA C√ÅC ƒê∆†N V·ªä C·∫§P X√É ---
        console.log("\n[2/3] ƒêang t√¨m v√† x√≥a c√°c ƒë∆°n v·ªã c·∫•p x√£ (commune)...");
        const unitsRef = db.collection('units');
        const communeUnitsQuery = unitsRef.where('type', '==', 'commune');
        
        let deletedUnitsCount = 0;
        while (true) {
            const numDeleted = await deleteQueryBatch(communeUnitsQuery, 100);
            deletedUnitsCount += numDeleted;
            if (numDeleted === 0) break;
        }

        if (deletedUnitsCount > 0) {
            console.log(`- ƒê√£ x√≥a ${deletedUnitsCount} ƒë∆°n v·ªã c·∫•p x√£ kh·ªèi collection 'units'.`);
        } else {
            console.log("- Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã c·∫•p x√£ n√†o ƒë·ªÉ x√≥a.");
        }

        console.log("\n[3/3] Qu√° tr√¨nh d·ªçn d·∫πp ho√†n t·∫•t.");
        console.log("\n=========================================");
        console.log("‚úÖ Script ƒë√£ ch·∫°y xong.");
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ªçn d·∫πp:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
