
/* eslint-disable no-console */
import * as admin from 'firebase-admin';
import type { Assessment } from '../lib/data';

// ========================================================================================
// SCRIPT D·ªåN D·∫∏P C√ÅC TR∆Ø·ªúNG CH·ªÆ K√ù S·ªê M·ªí C√îI
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Script n√†y qu√©t qua t·∫•t c·∫£ c√°c h·ªì s∆° trong collection 'assessments'.
// - N√≥ t√¨m ƒë·∫øn c√°c t·ªáp trong `assessmentData` (c·∫£ `files` v√† `filesPerDocument`).
// - N√≥ x√≥a c√°c tr∆∞·ªùng li√™n quan ƒë·∫øn ki·ªÉm tra ch·ªØ k√Ω c≈© nh∆∞ `signatureStatus`, 
//   `signatureError`, `contentCheckStatus`, `contentCheckIssues` kh·ªèi m·ªói ƒë·ªëi t∆∞·ª£ng t·ªáp.
// - M·ª•c ƒë√≠ch l√† ƒë·ªÉ l√†m s·∫°ch c∆° s·ªü d·ªØ li·ªáu, ch·ªâ gi·ªØ l·∫°i `name` v√† `url` cho m·ªói t·ªáp,
//   chu·∫©n b·ªã cho c∆° ch·∫ø ki·ªÉm tra m·ªõi ho·∫∑c ƒë∆°n gi·∫£n h√≥a c·∫•u tr√∫c.
// - Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y M·ªòT L·∫¶N DUY NH·∫§T.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run cleanup:signatures`
// ========================================================================================


// Kh·ªüi t·∫°o Firebase Admin SDK
if (!admin.apps.length) {
    try {
        const serviceAccount = require('../../service-account-credentials.json');
        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
        });
        console.log("Firebase Admin SDK ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
    } catch (error: any) {
        console.error("L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase Admin SDK.", error.message);
        process.exit(1);
    }
}

const db = admin.firestore();

async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† d·ªçn d·∫πp tr∆∞·ªùng ch·ªØ k√Ω s·ªë...");

        const assessmentsRef = db.collection('assessments');
        const snapshot = await assessmentsRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y h·ªì s∆° n√†o trong collection 'assessments'.");
            return;
        }
        
        let updatedCount = 0;
        const batch = db.batch();
        const fieldsToDelete = ['signatureStatus', 'signatureError', 'contentCheckStatus', 'contentCheckIssues'];


        console.log(`T√¨m th·∫•y ${snapshot.docs.length} h·ªì s∆°. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const assessment = doc.data() as Assessment;
            const assessmentData = assessment.assessmentData;
            let needsUpdate = false;

            if (!assessmentData) continue;

            for (const indicatorId in assessmentData) {
                const indicator = assessmentData[indicatorId];

                // D·ªçn d·∫πp trong tr∆∞·ªùng 'files'
                if (indicator.files && Array.isArray(indicator.files)) {
                    indicator.files.forEach(file => {
                        fieldsToDelete.forEach(field => {
                            if (file.hasOwnProperty(field)) {
                                delete (file as any)[field];
                                needsUpdate = true;
                            }
                        });
                    });
                }
                
                // D·ªçn d·∫πp trong tr∆∞·ªùng 'filesPerDocument'
                if (indicator.filesPerDocument && typeof indicator.filesPerDocument === 'object') {
                    for (const docIndex in indicator.filesPerDocument) {
                        const fileList = indicator.filesPerDocument[docIndex];
                        if (fileList && Array.isArray(fileList)) {
                             fileList.forEach(file => {
                                fieldsToDelete.forEach(field => {
                                    if (file.hasOwnProperty(field)) {
                                        delete (file as any)[field];
                                        needsUpdate = true;
                                    }
                                });
                            });
                        }
                    }
                }
            }


            if (needsUpdate) {
                console.log(`- Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho h·ªì s∆° ID: ${doc.id}`);
                batch.update(doc.ref, { assessmentData: assessmentData });
                updatedCount++;
            }
        }

        if (updatedCount > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán d·ªçn d·∫πp cho ${updatedCount} h·ªì s∆°...`);
            await batch.commit();
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ h·ªì s∆° n√†o c·∫ßn d·ªçn d·∫πp tr∆∞·ªùng ch·ªØ k√Ω s·ªë.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} h·ªì s∆°.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ªçn d·∫πp:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
