
/* eslint-disable no-console */
import * as admin from 'firebase-admin';

// ========================================================================================
// SCRIPT X√ìA TR∆Ø·ªúNG "calculationFormula"
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Qu√©t t·∫•t c·∫£ c√°c t√†i li·ªáu trong collection 'criteria'.
// - ƒê·ªëi v·ªõi m·ªói ti√™u ch√≠, duy·ªát qua c√°c ch·ªâ ti√™u v√† ch·ªâ ti√™u con.
// - X√≥a tr∆∞·ªùng 'calculationFormula' n·∫øu n√≥ t·ªìn t·∫°i.
// - Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y M·ªòT L·∫¶N DUY NH·∫§T ƒë·ªÉ d·ªçn d·∫πp d·ªØ li·ªáu.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run cleanup:formulas`
// ========================================================================================


// Kh·ªüi t·∫°o Firebase Admin SDK
if (!admin.apps.length) {
    try {
        const serviceAccount = require('../../service-account-credentials.json');
        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
        });
        console.log("Firebase Admin SDK ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
    } catch (error) {
        console.error("L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase Admin SDK.");
        console.error("H√£y ch·∫Øc ch·∫Øn r·∫±ng file `service-account-credentials.json` n·∫±m ·ªü th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.");
        process.exit(1);
    }
}

const db = admin.firestore();

async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† x√≥a tr∆∞·ªùng 'calculationFormula'...");

        const criteriaRef = db.collection('criteria');
        const snapshot = await criteriaRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ n√†o trong collection 'criteria'.");
            return;
        }
        
        let updatedCount = 0;
        const batch = db.batch();

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} ti√™u ch√≠. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const criterion = doc.data();
            let needsUpdate = false;

            // Duy·ªát qua c√°c ch·ªâ ti√™u
            if (criterion.indicators && Array.isArray(criterion.indicators)) {
                criterion.indicators.forEach((indicator: any) => {
                    // X√≥a tr∆∞·ªùng ·ªü c·∫•p ch·ªâ ti√™u
                    if (indicator.calculationFormula !== undefined) {
                        delete indicator.calculationFormula;
                        needsUpdate = true;
                    }
                    
                    // Duy·ªát qua c√°c ch·ªâ ti√™u con
                    if (indicator.subIndicators && Array.isArray(indicator.subIndicators)) {
                         indicator.subIndicators.forEach((subIndicator: any) => {
                            if (subIndicator.calculationFormula !== undefined) {
                                delete subIndicator.calculationFormula;
                                needsUpdate = true;
                            }
                        });
                    }
                });
            }

            if (needsUpdate) {
                console.log(`- Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho ti√™u ch√≠ ID: ${doc.id}`);
                batch.set(doc.ref, criterion); // set l·∫°i to√†n b·ªô object ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a
                updatedCount++;
            }
        }

        if (updatedCount > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán c·∫≠p nh·∫≠t cho ${updatedCount} ti√™u ch√≠...`);
            await batch.commit();
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ ti√™u ch√≠ n√†o c·∫ßn x√≥a tr∆∞·ªùng 'calculationFormula'.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} ti√™u ch√≠.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh d·ªçn d·∫πp:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
