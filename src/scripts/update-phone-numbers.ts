
/* eslint-disable no-console */
import { adminDb as db, adminAuth as auth } from '@/lib/firebase-admin';
import type { User } from '../lib/data';

// ========================================================================================
// SCRIPT C·∫¨P NH·∫¨T S·ªê ƒêI·ªÜN THO·∫†I
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Qu√©t t·∫•t c·∫£ ng∆∞·ªùi d√πng trong Firestore.
// - N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i, t·∫°o m·ªôt s·ªë ng·∫´u nhi√™n.
// - C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ƒë√≥ v√†o c·∫£ Firestore v√† Firebase Authentication.
// - Kh√¥ng l√†m thay ƒë·ªïi b·∫•t k·ª≥ d·ªØ li·ªáu n√†o kh√°c c·ªßa ng∆∞·ªùi d√πng.
//
// H∆Ø·ªöSNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run update:phones`
// ========================================================================================

/**
 * T·∫°o m·ªôt s·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n c·ªßa Vi·ªát Nam.
 * @returns M·ªôt chu·ªói string l√† s·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n.
 */
const generateRandomPhoneNumber = (): string => {
    const prefixes = ['090', '091', '093', '094', '098', '086', '088', '032', '033', '034', '035', '036', '037', '038', '039', '070', '079', '077'];
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const suffix = Math.floor(1000000 + Math.random() * 9000000).toString();
    return `${prefix}${suffix}`;
};

/**
 * Chuy·ªÉn ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i sang ƒë·ªãnh d·∫°ng E.164 (+84...).
 * @param phoneNumber - S·ªë ƒëi·ªán tho·∫°i ƒë·∫ßu v√†o.
 * @returns S·ªë ƒëi·ªán tho·∫°i ƒë·ªãnh d·∫°ng E.164.
 */
const convertToE164 = (phoneNumber: string): string => {
    if (phoneNumber.startsWith('+84')) {
        return phoneNumber;
    }
    if (phoneNumber.startsWith('0')) {
        return `+84${phoneNumber.substring(1)}`;
    }
    return `+84${phoneNumber}`;
};


async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i...");

        const usersRef = db.collection('users');
        const snapshot = await usersRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o trong Firestore.");
            return;
        }
        
        let updatedCount = 0;
        const updatePromises: Promise<any>[] = [];

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} ng∆∞·ªùi d√πng. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const user = doc.data() as User;
            
            // B·ªè qua admin
            if (user.role === 'admin') {
                continue;
            }

            // B·ªè qua n·∫øu ƒë√£ c√≥ s·ªë ƒëi·ªán tho·∫°i
            if (user.phoneNumber && user.phoneNumber.trim() !== '') {
                continue;
            }
            
            // T·∫°o SƒêT m·ªõi n·∫øu ch∆∞a c√≥
            const newPhoneNumber = generateRandomPhoneNumber();
            updatedCount++;
            console.log(`- Ng∆∞·ªùi d√πng '${user.displayName}' (UID: ${user.id}) thi·∫øu SƒêT. T·∫°o s·ªë m·ªõi: ${newPhoneNumber}`);

            // Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho Firestore
            const firestoreUpdatePromise = usersRef.doc(user.id).update({
                phoneNumber: newPhoneNumber
            });
            updatePromises.push(firestoreUpdatePromise);

            // Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho Firebase Auth
            const authUpdatePromise = auth.updateUser(user.id, {
                phoneNumber: convertToE164(newPhoneNumber) // Auth y√™u c·∫ßu ƒë·ªãnh d·∫°ng E.164
            }).catch(err => {
                // Ghi l·∫°i l·ªói nh∆∞ng kh√¥ng d·ª´ng script n·∫øu ch·ªâ m·ªôt user auth b·ªã l·ªói
                console.error(`  L·ªói khi c·∫≠p nh·∫≠t SƒêT trong Auth cho user ${user.id}:`, err.message);
            });
            updatePromises.push(authUpdatePromise);
        }

        if (updatePromises.length > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán c·∫≠p nh·∫≠t cho ${updatedCount} ng∆∞·ªùi d√πng...`);
            await Promise.all(updatePromises);
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c·∫ßn c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} ng∆∞·ªùi d√πng.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
