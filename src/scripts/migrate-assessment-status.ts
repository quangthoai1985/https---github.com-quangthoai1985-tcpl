
/* eslint-disable no-console */
import { adminDb as db, admin } from '@/lib/firebase-admin';

// ========================================================================================
// SCRIPT DI CHUY·ªÇN TR·∫†NG TH√ÅI H·ªí S∆† ƒê√ÅNH GI√Å
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Script n√†y qu√©t qua t·∫•t c·∫£ c√°c h·ªì s∆° trong collection 'assessments'.
// - N√≥ t√¨m c√°c h·ªì s∆° v·∫´n c√≤n s·ª≠ d·ª•ng tr∆∞·ªùng 'status' c≈©.
// - N√≥ chuy·ªÉn ƒë·ªïi gi√° tr·ªã t·ª´ 'status' c≈© sang hai tr∆∞·ªùng m·ªõi: 'registrationStatus' v√†
//   'assessmentStatus' ƒë·ªÉ ph√π h·ª£p v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu m·ªõi.
// - Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y M·ªòT L·∫¶N DUY NH·∫§T.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run migrate:status`
// ========================================================================================

type OldStatus = 'pending_registration' | 'registration_rejected' | 'registration_approved' | 'draft' | 'pending_review' | 'approved' | 'rejected';
type RegistrationStatus = 'pending' | 'approved' | 'rejected';
type AssessmentStatus = 'not_started' | 'draft' | 'pending_review' | 'returned_for_revision' | 'achieved_standard' | 'rejected';


const migrateStatus = (oldStatus: OldStatus): { registrationStatus: RegistrationStatus, assessmentStatus: AssessmentStatus } => {
    switch (oldStatus) {
        case 'pending_registration':
            return { registrationStatus: 'pending', assessmentStatus: 'not_started' };
        case 'registration_rejected':
            return { registrationStatus: 'rejected', assessmentStatus: 'not_started' };
        case 'registration_approved':
            return { registrationStatus: 'approved', assessmentStatus: 'not_started' };
        case 'draft':
            return { registrationStatus: 'approved', assessmentStatus: 'draft' };
        case 'pending_review':
            return { registrationStatus: 'approved', assessmentStatus: 'pending_review' };
        case 'approved': // This now means "achieved_standard"
            return { registrationStatus: 'approved', assessmentStatus: 'achieved_standard' };
        case 'rejected': // This now means "rejected" (final)
             // We assume old 'rejected' maps to the final 'rejected' status.
             // If it was meant as "return for revision", it needs manual correction.
            return { registrationStatus: 'approved', assessmentStatus: 'rejected' };
        default:
            // Fallback for any unknown status
            return { registrationStatus: 'pending', assessmentStatus: 'not_started' };
    }
}


async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† di chuy·ªÉn d·ªØ li·ªáu tr·∫°ng th√°i...");

        const assessmentsRef = db.collection('assessments');
        const snapshot = await assessmentsRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y h·ªì s∆° n√†o trong collection 'assessments'.");
            return;
        }
        
        let updatedCount = 0;
        const batch = db.batch();

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} h·ªì s∆°. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const data = doc.data();
            
            // Ch·ªâ x·ª≠ l√Ω c√°c document c√≥ tr∆∞·ªùng 'status' c≈©
            if (data.status && (!data.registrationStatus || !data.assessmentStatus)) {
                const oldStatus = data.status as OldStatus;
                const { registrationStatus, assessmentStatus } = migrateStatus(oldStatus);
                
                console.log(`- Di chuy·ªÉn tr·∫°ng th√°i cho h·ªì s∆° ID: ${doc.id}`);
                console.log(`  - Tr·∫°ng th√°i c≈©: '${oldStatus}'`);
                console.log(`  - Tr·∫°ng th√°i m·ªõi: registrationStatus='${registrationStatus}', assessmentStatus='${assessmentStatus}'`);

                batch.update(doc.ref, {
                    registrationStatus: registrationStatus,
                    assessmentStatus: assessmentStatus,
                    status: admin.firestore.FieldValue.delete() // X√≥a tr∆∞·ªùng status c≈©
                });
                updatedCount++;
            }
        }

        if (updatedCount > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán c·∫≠p nh·∫≠t cho ${updatedCount} h·ªì s∆°...`);
            await batch.commit();
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ h·ªì s∆° n√†o c·∫ßn di chuy·ªÉn tr·∫°ng th√°i.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} h·ªì s∆°.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di chuy·ªÉn d·ªØ li·ªáu:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
