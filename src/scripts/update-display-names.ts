
/* eslint-disable no-console */
import * as admin from 'firebase-admin';
import type { User } from '../lib/data';

// ========================================================================================
// SCRIPT C·∫¨P NH·∫¨T H·ªå V√Ä T√äN
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Qu√©t t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ vai tr√≤ 'commune_staff' trong Firestore.
// - T·∫°o m·ªôt h·ªç t√™n ti·∫øng Vi·ªát ng·∫´u nhi√™n.
// - C·∫≠p nh·∫≠t h·ªç t√™n m·ªõi ƒë√≥ v√†o c·∫£ Firestore v√† Firebase Authentication.
// - B·ªè qua ng∆∞·ªùi d√πng c√≥ vai tr√≤ 'admin'.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run update:names`
// ========================================================================================


// Kh·ªüi t·∫°o Firebase Admin SDK
if (!admin.apps.length) {
    try {
        const serviceAccount = require('../../service-account-credentials.json');
        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
        });
        console.log("Firebase Admin SDK ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
    } catch (error) {
        console.error("L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase Admin SDK.");
        console.error("H√£y ch·∫Øc ch·∫Øn r·∫±ng file `service-account-credentials.json` n·∫±m ·ªü th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.");
        process.exit(1);
    }
}

const db = admin.firestore();
const auth = admin.auth();

/**
 * T·∫°o m·ªôt h·ªç t√™n ti·∫øng Vi·ªát ng·∫´u nhi√™n.
 * @returns M·ªôt chu·ªói string l√† h·ªç t√™n ƒë·∫ßy ƒë·ªß.
 */
const generateRandomFullName = (): string => {
    const lastNames = ['Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'V√µ', 'Phan', 'Tr∆∞∆°ng', 'B√πi', 'ƒê·∫∑ng', 'ƒê·ªó', 'Ng√¥', 'H·ªì', 'D∆∞∆°ng'];
    const middleNames = ['VƒÉn', 'Th·ªã', 'H·ªØu', 'Minh', 'Thanh', 'Ng·ªçc', 'ƒê·ª©c', 'Xu√¢n', 'Gia', 'B·∫£o', 'Qu·ªëc', 'Tu·∫•n'];
    const firstNames = ['An', 'B√¨nh', 'Anh', 'Ch√¢u', 'D≈©ng', 'Giang', 'H·∫£i', 'H√≤a', 'H√πng', 'Huy', 'Kh√°nh', 'Linh', 'Long', 'Minh', 'Nam', 'Nga', 'Ng√¢n', 'Ph√∫c', 'Ph∆∞∆°ng', 'Qu√¢n', 'S∆°n', 'T√¢m', 'Th·∫Øng', 'Trang', 'T√∫', 'Vi·ªát'];

    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const middleName = middleNames[Math.floor(Math.random() * middleNames.length)];
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    
    return `${lastName} ${middleName} ${firstName}`;
};


async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh qu√©t v√† c·∫≠p nh·∫≠t h·ªç t√™n ng∆∞·ªùi d√πng...");

        const usersRef = db.collection('users');
        const snapshot = await usersRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o trong Firestore.");
            return;
        }
        
        let updatedCount = 0;
        const updatePromises: Promise<any>[] = [];

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} ng∆∞·ªùi d√πng. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const user = doc.data() as User;
            
            // B·ªè qua admin
            if (user.role === 'admin') {
                console.log(`- B·ªè qua ng∆∞·ªùi d√πng admin: '${user.displayName}'`);
                continue;
            }
            
            // T·∫°o t√™n m·ªõi
            const newDisplayName = generateRandomFullName();
            updatedCount++;
            console.log(`- C·∫≠p nh·∫≠t t√™n cho '${user.displayName}' (UID: ${user.id}) th√†nh '${newDisplayName}'`);

            // Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho Firestore
            const firestoreUpdatePromise = usersRef.doc(user.id).update({
                displayName: newDisplayName
            });
            updatePromises.push(firestoreUpdatePromise);

            // Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho Firebase Auth
            const authUpdatePromise = auth.updateUser(user.id, {
                displayName: newDisplayName
            }).catch(err => {
                // Ghi l·∫°i l·ªói nh∆∞ng kh√¥ng d·ª´ng script n·∫øu ch·ªâ m·ªôt user auth b·ªã l·ªói
                console.error(`  L·ªói khi c·∫≠p nh·∫≠t t√™n trong Auth cho user ${user.id}:`, err.message);
            });
            updatePromises.push(authUpdatePromise);
        }

        if (updatePromises.length > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán c·∫≠p nh·∫≠t cho ${updatedCount} ng∆∞·ªùi d√πng...`);
            await Promise.all(updatePromises);
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o (ngo√†i admin) c·∫ßn c·∫≠p nh·∫≠t t√™n.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} ng∆∞·ªùi d√πng.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
