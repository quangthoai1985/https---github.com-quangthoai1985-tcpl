
/* eslint-disable no-console */
import { adminDb as db } from '@/lib/firebase-admin';
import type { Criterion, Indicator, SubIndicator, Content } from '../lib/data';

// ========================================================================================
// SCRIPT DI CHUY·ªÇN D·ªÆ LI·ªÜU T·ª™ subIndicators SANG contents
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Script n√†y qu√©t qua t·∫•t c·∫£ c√°c t√†i li·ªáu trong collection 'criteria'.
// - ƒê·ªëi v·ªõi m·ªói ch·ªâ ti√™u, n√≥ ki·ªÉm tra xem c√≥ tr∆∞·ªùng 'subIndicators' (c·∫•u tr√∫c c≈©)
//   m√† ch∆∞a c√≥ tr∆∞·ªùng 'contents' (c·∫•u tr√∫c m·ªõi) hay kh√¥ng.
// - N·∫øu c√≥, n√≥ s·∫Ω chuy·ªÉn ƒë·ªïi m·∫£ng 'subIndicators' th√†nh m·∫£ng 'contents' m·ªõi,
//   gi·ªØ nguy√™n c√°c tr∆∞·ªùng d·ªØ li·ªáu t∆∞∆°ng ·ª©ng.
// - N√≥ c≈©ng s·∫Ω t·ª± ƒë·ªông g√°n m·ªôt 'passRule' m·∫∑c ƒë·ªãnh l√† { type: 'all' },
//   ph·∫£n √°nh logic c≈© l√† t·∫•t c·∫£ c√°c m·ª•c con ƒë·ªÅu ph·∫£i ƒë·∫°t.
// - Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y M·ªòT L·∫¶N DUY NH·∫§T sau khi deploy code m·ªõi.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o file `service-account-credentials.json` t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run migrate:contents`
// ========================================================================================


async function main() {
    try {
        console.log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh di chuy·ªÉn d·ªØ li·ªáu t·ª´ 'subIndicators' sang 'contents'...");

        const criteriaRef = db.collection('criteria');
        const snapshot = await criteriaRef.get();

        if (snapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ n√†o trong collection 'criteria'.");
            return;
        }
        
        let updatedCount = 0;
        const batch = db.batch();

        console.log(`T√¨m th·∫•y ${snapshot.docs.length} ti√™u ch√≠. ƒêang ki·ªÉm tra...`);

        for (const doc of snapshot.docs) {
            const criterion = doc.data() as Criterion;
            let needsUpdate = false;

            if (criterion.indicators && Array.isArray(criterion.indicators)) {
                criterion.indicators.forEach((indicator: Indicator) => {
                    // ƒêi·ªÅu ki·ªán ƒë·ªÉ di chuy·ªÉn: c√≥ subIndicators v√† ch∆∞a c√≥ contents
                    if (indicator.subIndicators?.length > 0 && (!indicator.contents || indicator.contents.length === 0)) {
                        console.log(`- Ti√™u ch√≠ ${criterion.id}, Ch·ªâ ti√™u ${indicator.id}: Ph√°t hi·ªán c·∫•u tr√∫c 'subIndicators' c≈©. Chu·∫©n b·ªã di chuy·ªÉn...`);
                        
                        // Chuy·ªÉn ƒë·ªïi subIndicators th√†nh contents
                        indicator.contents = indicator.subIndicators.map((sub: SubIndicator): Content => ({
                            id: sub.id,
                            name: sub.name,
                            description: sub.description,
                            standardLevel: sub.standardLevel,
                            inputType: sub.inputType,
                            evidenceRequirement: sub.evidenceRequirement
                        }));

                        // G√°n passRule m·∫∑c ƒë·ªãnh
                        indicator.passRule = { type: 'all' };

                        // X√≥a tr∆∞·ªùng subIndicators c≈© ƒë·ªÉ d·ªçn d·∫πp
                        delete (indicator as any).subIndicators;

                        needsUpdate = true;
                    }
                });
            }

            if (needsUpdate) {
                console.log(`  -> Chu·∫©n b·ªã c·∫≠p nh·∫≠t cho t√†i li·ªáu ti√™u ch√≠ ID: ${doc.id}`);
                batch.update(doc.ref, { indicators: criterion.indicators });
                updatedCount++;
            }
        }

        if (updatedCount > 0) {
            console.log(`\nƒêang th·ª±c hi·ªán di chuy·ªÉn d·ªØ li·ªáu cho ${updatedCount} ti√™u ch√≠...`);
            await batch.commit();
            console.log("T·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t.");
        } else {
            console.log("\nKh√¥ng c√≥ ti√™u ch√≠ n√†o c·∫ßn di chuy·ªÉn d·ªØ li·ªáu.");
        }

        console.log("\n=========================================");
        console.log(`‚úÖ Script ƒë√£ ch·∫°y xong. ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} t√†i li·ªáu ti√™u ch√≠.`);
        console.log("=========================================");

    } catch (error) {
        console.error("\n========================================");
        console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di chuy·ªÉn d·ªØ li·ªáu:", error);
        console.error("========================================");
        process.exit(1);
    }
}

main();
