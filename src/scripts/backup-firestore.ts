
/* eslint-disable no-console */
import { admin } from '@/lib/firebase-admin';
import * as fs from 'fs';
import * as path from 'path';

// ========================================================================================
// SCRIPT SAO L∆ØU D·ªÆ LI·ªÜU FIRESTORE
// ========================================================================================
// M·ª§C ƒê√çCH:
// - Script n√†y s·ª≠ d·ª•ng Firebase Admin SDK ƒë·ªÉ xu·∫•t (export) to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu
//   Firestore c·ªßa b·∫°n.
// - D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o m·ªôt th∆∞ m·ª•c trong Firebase Storage.
// - ƒê√¢y l√† m·ªôt ph∆∞∆°ng ph√°p sao l∆∞u th·ªß c√¥ng, an to√†n v√† hi·ªáu qu·∫£ ƒë·ªÉ b·∫°n c√≥ th·ªÉ
//   ch·∫°y b·∫•t c·ª© khi n√†o c·∫ßn t·∫°o m·ªôt b·∫£n sao l∆∞u.
//
// H∆Ø·ªöNG D·∫™N CH·∫†Y:
// 1. ƒê·∫£m b·∫£o b·∫°n ƒëang ·ªü trong m√¥i tr∆∞·ªùng c√≥ quy·ªÅn truy c·∫≠p Google Cloud (nh∆∞ Cloud Shell)
//    ho·∫∑c ƒë√£ c√†i ƒë·∫∑t v√† x√°c th·ª±c gcloud CLI ·ªü local.
// 2. M·ªü terminal v√† ch·∫°y l·ªánh: `npm run backup:firestore`
// ========================================================================================

function getProjectId(): string | undefined {
    // 1. ∆Øu ti√™n l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (th∆∞·ªùng c√≥ s·∫µn tr√™n Cloud Run/Functions)
    const envProjectId = process.env.GCLOUD_PROJECT || process.env.GOOGLE_CLOUD_PROJECT;
    if (envProjectId) {
        console.log(`Project ID found from environment variable: ${envProjectId}`);
        return envProjectId;
    }

    // 2. L·∫•y t·ª´ file service account credentials
    const serviceAccountPath = path.join(process.cwd(), 'service-account-credentials.json');
    if (fs.existsSync(serviceAccountPath)) {
        try {
            const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));
            if (serviceAccount.project_id) {
                console.log(`Project ID found from service-account-credentials.json: ${serviceAccount.project_id}`);
                return serviceAccount.project_id;
            }
        } catch (e) {
            console.warn("Could not read or parse service-account-credentials.json");
        }
    }

    // 3. L·∫•y t·ª´ c·∫•u h√¨nh kh·ªüi t·∫°o c·ªßa Admin SDK (√≠t tin c·∫≠y h∆°n khi ch·∫°y script local)
    const sdkProjectId = admin.instanceId?.().app.options.projectId;
     if (sdkProjectId) {
        console.log(`Project ID found from initialized Admin SDK: ${sdkProjectId}`);
        return sdkProjectId;
    }
    
    return undefined;
}


async function main() {
  const firestoreClient = new admin.firestore.v1.FirestoreAdminClient();
  
  const projectId = getProjectId();
  
  if (!projectId) {
      console.error("üî• L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh Project ID. H√£y ƒë·∫£m b·∫£o file 'service-account-credentials.json' c√≥ tr∆∞·ªùng 'project_id' ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng GCLOUD_PROJECT ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.");
      process.exit(1);
  }

  const bucket = `gs://${projectId}.appspot.com`; // Bucket m·∫∑c ƒë·ªãnh c·ªßa Firebase
  const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '');
  const path = `${bucket}/firestore-backups/${timestamp}`;
  
  const databaseName = firestoreClient.databasePath(projectId, '(default)');

  console.log(`B·∫Øt ƒë·∫ßu qu√° tr√¨nh xu·∫•t d·ªØ li·ªáu Firestore...`);
  console.log(`- Project ID: ${projectId}`);
  console.log(`- Ngu·ªìn: ${databaseName}`);
  console.log(`- ƒê√≠ch (Storage Bucket): ${path}`);

  try {
    const [response] = await firestoreClient.exportDocuments({
      name: databaseName,
      outputUriPrefix: path,
      // ƒê·ªÉ tr·ªëng collectionIds ƒë·ªÉ xu·∫•t to√†n b·ªô database
      // collectionIds: ['users', 'units'] 
    });
    
    console.log("\n-----------------------------------------");
    console.log("... ƒêang x·ª≠ l√Ω, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t ...");
    console.log(`- T√™n ti·∫øn tr√¨nh (Operation Name): ${response.name}`);
    console.log("-----------------------------------------\n");
    console.log("‚úÖ Y√™u c·∫ßu sao l∆∞u ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    console.log("Ki·ªÉm tra Firebase Storage c·ªßa b·∫°n trong th∆∞ m·ª•c 'firestore-backups' sau v√†i ph√∫t n·ªØa.");

  } catch (error) {
    console.error("\n========================================");
    console.error("üî• ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh xu·∫•t d·ªØ li·ªáu:", error);
    console.error("========================================");
    process.exit(1);
  }
}

main();
