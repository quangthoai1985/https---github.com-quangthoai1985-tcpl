rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isOwner(communeId) {
      return request.auth.token.communeId == communeId;
    }

    // Rules for each collection

    match /users/{userId} {
      allow read: if isAdmin() || request.auth.uid == userId;
      allow write: if isAdmin() || request.auth.uid == userId;
    }

    match /units/{unitId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /criteria/{criterionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /assessmentPeriods/{periodId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /assessments/{assessmentId} {
      allow read, write: if isAdmin() || isOwner(resource.data.communeId);
      // Create is handled implicitly by the write rule above, checking against request.resource.data
      // allow create: if isOwner(request.resource.data.communeId);
    }
    
    match /guidanceDocuments/{docId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /configurations/{configId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    // This collection is written to by Cloud Functions, which have admin privileges
    // and bypass these rules. We can make it read-only for admins for debugging.
    match /signature_checks/{checkId} {
      allow read: if isAdmin();
      allow write: if false; // Only backend can write
    }
  }
}
